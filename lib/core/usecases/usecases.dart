import 'dart:developer';

import 'package:dartz/dartz.dart';
import 'package:equatable/equatable.dart';
import 'package:zefyr/core/error/failures.dart';

/// –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö Use Cases
abstract class UseCase<Type, Params> {
  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç use case —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  Future<Either<Failure, Type>> call(Params params);
}

/// Use Case –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
abstract class UseCaseNoParams<Type> {
  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç use case –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  Future<Either<Failure, Type>> call();
}

/// –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Use Case
abstract class UseCaseSync<Type, Params> {
  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç use case —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  Either<Failure, Type> call(Params params);
}

/// –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Use Case –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
abstract class UseCaseSyncNoParams<Type> {
  /// –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç use case –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  Either<Failure, Type> call();
}

/// Stream Use Case
abstract class StreamUseCase<Type, Params> {
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è use case
  Stream<Either<Failure, Type>> call(Params params);
}

/// Stream Use Case –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
abstract class StreamUseCaseNoParams<Type> {
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è use case –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  Stream<Either<Failure, Type>> call();
}

/// –ö–ª–∞—Å—Å –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –Ω—É–∂–Ω—ã
class NoParams extends Equatable {
  @override
  List<Object> get props => [];
}

/// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Use Case
abstract class UseCaseParams extends Equatable {
  const UseCaseParams();
}

/// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Use Cases
class UseCaseUtils {
  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ use cases –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  static Future<Either<Failure, List<T>>> executeParallel<T>(
    List<Future<Either<Failure, T>>> useCases,
  ) async {
    try {
      final results = await Future.wait(useCases);
      final failures = <Failure>[];
      final successes = <T>[];

      for (final result in results) {
        result.fold(
          (failure) => failures.add(failure),
          (success) => successes.add(success),
        );
      }

      if (failures.isNotEmpty) {
        return Left(failures.first);
      }

      return Right(successes);
    } catch (e) {
      return Left(GeneralFailure(message: e.toString()));
    }
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç use cases –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
  static Future<Either<Failure, List<T>>> executeSequential<T>(
    List<Future<Either<Failure, T>> Function()> useCaseFactories,
  ) async {
    final results = <T>[];

    for (final factory in useCaseFactories) {
      final result = await factory();

      final failure = result.fold((failure) => failure, (success) {
        results.add(success);
        return null;
      });

      if (failure != null) {
        return Left(failure);
      }
    }

    return Right(results);
  }

  /// –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ use case –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
  static Future<Either<Failure, T>> retry<T>(
    Future<Either<Failure, T>> Function() useCase, {
    int maxRetries = 3,
    Duration delay = const Duration(seconds: 1),
    bool Function(Failure)? shouldRetry,
  }) async {
    Either<Failure, T>? lastResult;

    for (int attempt = 0; attempt <= maxRetries; attempt++) {
      lastResult = await useCase();

      final shouldContinue = lastResult.fold((failure) {
        if (attempt == maxRetries) return false;
        return shouldRetry?.call(failure) ?? true;
      }, (_) => false);

      if (!shouldContinue) break;

      if (attempt < maxRetries) {
        await Future<void>.delayed(delay);
      }
    }

    return lastResult!;
  }

  /// –í—ã–ø–æ–ª–Ω—è–µ—Ç use case —Å —Ç–∞–π–º–∞—É—Ç–æ–º
  static Future<Either<Failure, T>> withTimeout<T>(
    Future<Either<Failure, T>> useCase, {
    Duration timeout = const Duration(seconds: 30),
  }) async {
    try {
      return await useCase.timeout(timeout);
    } catch (e) {
      return Left(TimeoutFailure(message: 'Use case timed out: $e'));
    }
  }
}

/// –ú–∏–∫—Å–∏–Ω –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è Use Cases
mixin UseCaseLogging<Type, Params> on UseCase<Type, Params> {
  String get useCaseName => runtimeType.toString();

  @override
  Future<Either<Failure, Type>> call(Params params) async {
    log('üöÄ Executing $useCaseName with params: $params');
    final stopwatch = Stopwatch()..start();

    final result = await executeUseCase(params);

    stopwatch.stop();

    result.fold(
      (failure) => log(
        '‚ùå $useCaseName failed: ${failure.message} (${stopwatch.elapsedMilliseconds}ms)',
      ),
      (success) =>
          log('‚úÖ $useCaseName succeeded (${stopwatch.elapsedMilliseconds}ms)'),
    );

    return result;
  }

  /// –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ use case
  Future<Either<Failure, Type>> executeUseCase(Params params);
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∏–∫—Å–∏–Ω–∞
/*
class LoginUser extends UseCase<User, LoginParams> with UseCaseLogging<User, LoginParams> {
  final AuthRepository repository;

  LoginUser(this.repository);

  @override
  Future<Either<Failure, User>> executeUseCase(LoginParams params) async {
    return await repository.login(params.email, params.password);
  }
}
*/
